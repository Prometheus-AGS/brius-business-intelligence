openapi: 3.0.3
info:
  title: Mastra BI - Knowledge Base API
  description: REST API for knowledge base operations including document management and semantic search
  version: 1.0.0
  contact:
    name: Mastra BI System
    url: https://github.com/mastra-ai/mastra

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.brius.com
    description: Production server

paths:
  /api/knowledge/documents:
    post:
      summary: Upload document
      description: Upload and process a document for semantic search
      operationId: uploadDocument
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Document file (PDF, DOCX, TXT, MD)
                metadata:
                  type: object
                  description: Document metadata (JSON)
                  properties:
                    category:
                      type: string
                      description: Document category
                    tags:
                      type: array
                      items:
                        type: string
                    access_level:
                      type: string
                      enum: [public, restricted, private]
      responses:
        '200':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List documents
      description: List uploaded documents with optional filtering
      operationId: listDocuments
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category
        - name: uploaded_by
          in: query
          schema:
            type: string
          description: Filter by uploader
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'

  /api/knowledge/documents/{id}:
    get:
      summary: Get document
      description: Retrieve document metadata and content
      operationId: getDocument
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete document
      description: Delete document and all associated chunks
      operationId: deleteDocument
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Document deleted successfully
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/knowledge/search:
    post:
      summary: Search knowledge base
      description: Perform semantic search across all documents
      operationId: searchKnowledge
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/knowledge/embed:
    post:
      summary: Generate embeddings
      description: Generate vector embeddings for text using Titan v2
      operationId: generateEmbeddings
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedRequest'
      responses:
        '200':
          description: Embeddings generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedResponse'

  /api/knowledge/stats:
    get:
      summary: Get knowledge base statistics
      description: Retrieve statistics about documents and search performance
      operationId: getKnowledgeStats
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: Knowledge base statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase JWT token for user authentication (optional)

  schemas:
    DocumentUploadResponse:
      type: object
      required:
        - id
        - filename
        - file_size
        - processing_status
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        file_size:
          type: integer
        processing_status:
          type: string
          enum: [pending, processing, completed, failed]
        message:
          type: string

    DocumentListResponse:
      type: object
      required:
        - documents
        - total
        - limit
        - offset
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentSummary'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    DocumentSummary:
      type: object
      required:
        - id
        - filename
        - file_type
        - file_size
        - processing_status
        - created_at
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        file_type:
          type: string
        file_size:
          type: integer
        processing_status:
          type: string
          enum: [pending, processing, completed, failed]
        uploaded_by:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time

    Document:
      type: object
      required:
        - id
        - filename
        - content
        - file_type
        - file_size
        - processing_status
        - created_at
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        content:
          type: string
        file_type:
          type: string
        file_size:
          type: integer
        processing_status:
          type: string
          enum: [pending, processing, completed, failed]
        uploaded_by:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        chunks_count:
          type: integer
          description: Number of chunks generated

    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query text
        top_k:
          type: integer
          minimum: 1
          maximum: 50
          default: 5
          description: Number of results to return
        filters:
          type: object
          description: Metadata filters
          properties:
            category:
              type: string
            access_level:
              type: string
            uploaded_by:
              type: string
        hybrid:
          type: boolean
          default: true
          description: Use hybrid search (vector + keyword)
        similarity_threshold:
          type: number
          minimum: 0
          maximum: 1
          default: 0.7
          description: Minimum similarity score

    SearchResponse:
      type: object
      required:
        - results
        - query
        - total_results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        query:
          type: string
        total_results:
          type: integer
        search_time_ms:
          type: integer

    SearchResult:
      type: object
      required:
        - chunk_id
        - document_id
        - content
        - similarity_score
      properties:
        chunk_id:
          type: string
          format: uuid
        document_id:
          type: string
          format: uuid
        document_filename:
          type: string
        content:
          type: string
        similarity_score:
          type: number
          minimum: 0
          maximum: 1
        metadata:
          type: object
        chunk_index:
          type: integer

    EmbedRequest:
      type: object
      required:
        - text
      properties:
        text:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        normalize:
          type: boolean
          default: true

    EmbedResponse:
      type: object
      required:
        - embeddings
      properties:
        embeddings:
          type: array
          items:
            type: array
            items:
              type: number
        model:
          type: string
          enum: [amazon.titan-embed-text-v2]

    StatsResponse:
      type: object
      required:
        - total_documents
        - total_chunks
        - storage_size_mb
      properties:
        total_documents:
          type: integer
        total_chunks:
          type: integer
        storage_size_mb:
          type: number
        documents_by_type:
          type: object
          additionalProperties:
            type: integer
        processing_status_counts:
          type: object
          properties:
            pending:
              type: integer
            processing:
              type: integer
            completed:
              type: integer
            failed:
              type: integer
        avg_search_time_ms:
          type: number
        total_searches_24h:
          type: integer

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            message:
              type: string
            code:
              type: string
            details:
              type: object