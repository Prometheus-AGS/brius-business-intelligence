openapi: 3.0.3
info:
  title: Mastra BI - OpenAI Compatible API
  description: OpenAI-compatible REST API for chat completions, models, and embeddings
  version: 1.0.0
  contact:
    name: Mastra BI System
    url: https://github.com/mastra-ai/mastra

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.brius.com
    description: Production server

paths:
  /v1/chat/completions:
    post:
      summary: Create chat completion
      description: Create a completion for a chat conversation, compatible with OpenAI API
      operationId: createChatCompletion
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Successful completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionStreamResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/models:
    get:
      summary: List available models
      description: List available AI agents as OpenAI-compatible models
      operationId: listModels
      security:
        - bearerAuth: []
        - {}
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsResponse'

  /v1/embeddings:
    post:
      summary: Create embeddings
      description: Create vector embeddings using AWS Bedrock Titan v2
      operationId: createEmbeddings
      security:
        - bearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsRequest'
      responses:
        '200':
          description: Successful embedding creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase JWT token for user authentication (optional)

  schemas:
    ChatCompletionRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: Model ID (agent name)
          enum:
            - business-intelligence-agent
            - default-agent
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: Conversation messages
        stream:
          type: boolean
          default: false
          description: Whether to stream responses
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
          description: Available tools for the conversation
        tool_choice:
          oneOf:
            - type: string
              enum: [auto, none]
            - type: object
              properties:
                type:
                  type: string
                  enum: [function]
                function:
                  type: object
                  properties:
                    name:
                      type: string
        max_tokens:
          type: integer
          minimum: 1
          description: Maximum tokens to generate
        temperature:
          type: number
          minimum: 0
          maximum: 2
          description: Sampling temperature
        user:
          type: string
          description: User identifier for tracking

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant, tool]
        content:
          type: string
          description: Message content
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ToolCall'
        tool_call_id:
          type: string
          description: ID of tool call this message responds to

    ToolCall:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
        type:
          type: string
          enum: [function]
        function:
          type: object
          required:
            - name
            - arguments
          properties:
            name:
              type: string
            arguments:
              type: string
              description: JSON-encoded function arguments

    Tool:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum: [function]
        function:
          type: object
          required:
            - name
            - description
          properties:
            name:
              type: string
            description:
              type: string
            parameters:
              type: object
              description: JSON Schema for function parameters

    ChatCompletionResponse:
      type: object
      required:
        - id
        - object
        - created
        - model
        - choices
        - usage
      properties:
        id:
          type: string
        object:
          type: string
          enum: [chat.completion]
        created:
          type: integer
          description: Unix timestamp
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'

    ChatCompletionChoice:
      type: object
      required:
        - index
        - message
        - finish_reason
      properties:
        index:
          type: integer
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string
          enum: [stop, length, tool_calls, max_tokens]

    ChatCompletionStreamResponse:
      type: object
      required:
        - id
        - object
        - created
        - model
        - choices
      properties:
        id:
          type: string
        object:
          type: string
          enum: [chat.completion.chunk]
        created:
          type: integer
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionStreamChoice'

    ChatCompletionStreamChoice:
      type: object
      required:
        - index
        - delta
      properties:
        index:
          type: integer
        delta:
          type: object
          properties:
            role:
              type: string
            content:
              type: string
            tool_calls:
              type: array
              items:
                $ref: '#/components/schemas/ToolCall'
        finish_reason:
          type: string
          enum: [stop, length, tool_calls, max_tokens]

    ModelsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'

    Model:
      type: object
      required:
        - id
        - object
        - created
        - owned_by
      properties:
        id:
          type: string
        object:
          type: string
          enum: [model]
        created:
          type: integer
        owned_by:
          type: string
          enum: [brius]

    EmbeddingsRequest:
      type: object
      required:
        - model
        - input
      properties:
        model:
          type: string
          enum: [amazon.titan-embed-text-v2]
        input:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        user:
          type: string
          description: User identifier for tracking

    EmbeddingsResponse:
      type: object
      required:
        - object
        - data
        - model
        - usage
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/Embedding'
        model:
          type: string
        usage:
          $ref: '#/components/schemas/Usage'

    Embedding:
      type: object
      required:
        - object
        - embedding
        - index
      properties:
        object:
          type: string
          enum: [embedding]
        embedding:
          type: array
          items:
            type: number
          description: 1024-dimensional vector
        index:
          type: integer

    Usage:
      type: object
      required:
        - prompt_tokens
        - total_tokens
      properties:
        prompt_tokens:
          type: integer
        completion_tokens:
          type: integer
        total_tokens:
          type: integer

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
            - type
          properties:
            message:
              type: string
            type:
              type: string
            code:
              type: string